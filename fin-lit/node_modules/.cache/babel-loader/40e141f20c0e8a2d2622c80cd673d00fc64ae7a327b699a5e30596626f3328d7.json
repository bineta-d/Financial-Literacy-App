{"ast":null,"code":"var _jsxFileName = \"/Users/binetadiatta/Downloads/FinLit2/fin-lit/src/components/context/appContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from \"axios\";\nimport { createContext, useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { OPEN_AI_URL, YT_API_URL, YT_WATCH_URL } from \"../API\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(null);\nexport const useAppContext = () => {\n  _s();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppcontext must be within appContextProvider!');\n  }\n  return context;\n};\n_s(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst AppContextProvider = ({\n  children,\n  searchTerm\n}) => {\n  _s2();\n  const [videos, setVideos] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [chatbotResponse, setChatbotResponse] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(\"Current searchTerm:\", searchTerm);\n\n  // Fetch video list on component mount or when searchTerm changes\n  useEffect(() => {\n    const fetchVideos = async () => {\n      if (!searchTerm) {\n        console.error(\"Search term is undefined\");\n        return;\n      }\n      try {\n        const response = await axios.get(`${YT_API_URL}&q=${encodeURIComponent(searchTerm)}&part=snippet&type=video&maxResults=16`);\n        console.log(\"API response\", response.data);\n        setVideos(response.data.items);\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n      }\n    };\n    fetchVideos();\n  }, [searchTerm]);\n\n  // Chatbot function\n  const handleChatbot = async () => {\n    setIsLoading(true);\n    try {\n      const response = await axios.post(\"https://api.openai.com/v1/chat/completions\", {\n        model: \"gpt-3.5-turbo-0125\",\n        messages: [{\n          role: \"system\",\n          content: \"You are a financial assistant that answers financial literacy questions and provides helpful resources.\"\n        }, {\n          role: \"user\",\n          content: userInput\n        }]\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${OPEN_AI_URL}`\n        }\n      });\n      const chatbotMessage = response.data.choices[0].message.content;\n      console.log(chatbotMessage);\n      setChatbotResponse(chatbotMessage);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setChatbotResponse(\"Sorry, I couldn't fetch the response. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      videos,\n      userInput,\n      setUserInput,\n      chatbotResponse,\n      handleChatbot,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s2(AppContextProvider, \"meMQxEEtRwMb7MphkhkHeQA5xr0=\");\n_c = AppContextProvider;\nconst VideoList = () => {\n  _s3();\n  const {\n    videos\n  } = useAppContext([]); // Access videos from context\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-list\",\n    children: videos.map((video, index) => {\n      var _video$snippet, _video$snippet2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-item title\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: (_video$snippet = video.snippet) === null || _video$snippet === void 0 ? void 0 : _video$snippet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `${YT_WATCH_URL}${video.id.videoId}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-item thumbnail\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: (_video$snippet2 = video.snippet) === null || _video$snippet2 === void 0 ? void 0 : _video$snippet2.thumbnails.medium.url,\n              alt: \"thumbnail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s3(VideoList, \"x55aag9kGGHFeYB8sT05SW03vDc=\", false, function () {\n  return [useAppContext];\n});\n_c2 = VideoList;\nexport { AppContextProvider, VideoList };\nvar _c, _c2;\n$RefreshReg$(_c, \"AppContextProvider\");\n$RefreshReg$(_c2, \"VideoList\");","map":{"version":3,"names":["axios","createContext","useContext","useEffect","useState","OPEN_AI_URL","YT_API_URL","YT_WATCH_URL","Link","jsxDEV","_jsxDEV","AppContext","useAppContext","_s","context","Error","AppContextProvider","children","searchTerm","_s2","videos","setVideos","userInput","setUserInput","chatbotResponse","setChatbotResponse","isLoading","setIsLoading","console","log","fetchVideos","error","response","get","encodeURIComponent","data","items","handleChatbot","post","model","messages","role","content","headers","Authorization","chatbotMessage","choices","message","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","VideoList","_s3","className","map","video","index","_video$snippet","_video$snippet2","snippet","title","to","id","videoId","src","thumbnails","medium","url","alt","_c2","$RefreshReg$"],"sources":["/Users/binetadiatta/Downloads/FinLit2/fin-lit/src/components/context/appContext.js"],"sourcesContent":["import axios from \"axios\";\nimport { createContext, useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { OPEN_AI_URL, YT_API_URL, YT_WATCH_URL } from \"../API\";\nimport { Link } from \"react-router-dom\";\n\nconst AppContext = createContext(null);\n\nexport const useAppContext = () => {\n    const context = useContext(AppContext);\n    if (!context) {\n        throw new Error('useAppcontext must be within appContextProvider!');\n    }\n    return context;\n};\n\nconst AppContextProvider = ({ children, searchTerm }) => {\n    const [videos, setVideos] = useState([]);\n    const [userInput, setUserInput] = useState(\"\");\n    const [chatbotResponse, setChatbotResponse] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n\n    console.log(\"Current searchTerm:\", searchTerm);\n\n    // Fetch video list on component mount or when searchTerm changes\n    useEffect(() => {\n        const fetchVideos = async () => {\n            if (!searchTerm) {\n                console.error(\"Search term is undefined\");\n                return;\n            }\n\n            try {\n                const response = await axios.get(`${YT_API_URL}&q=${encodeURIComponent(searchTerm)}&part=snippet&type=video&maxResults=16`);\n                console.log(\"API response\", response.data);\n                setVideos(response.data.items);\n            } catch (error) {\n                console.error(\"Error fetching videos:\", error);\n            }\n        };\n\n        fetchVideos();\n    }, [searchTerm]);\n\n    // Chatbot function\n    const handleChatbot = async () => {\n        setIsLoading(true);\n        try {\n            const response = await axios.post(\n                \"https://api.openai.com/v1/chat/completions\",\n                {\n                    model: \"gpt-3.5-turbo-0125\",\n                    messages: [\n                        {\n                            role: \"system\",\n                            content: \"You are a financial assistant that answers financial literacy questions and provides helpful resources.\"\n                        },\n                        {\n                            role: \"user\",\n                            content: userInput\n                        }\n                    ]\n                },\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `Bearer ${OPEN_AI_URL}`,\n                    },\n                }\n            );\n            const chatbotMessage = response.data.choices[0].message.content;\n            console.log(chatbotMessage);\n            setChatbotResponse(chatbotMessage);\n        } catch (error) {\n            console.error(\"Error fetching chatbot response:\", error);\n            setChatbotResponse(\"Sorry, I couldn't fetch the response. Please try again.\");\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <AppContext.Provider value={{ \n            videos,\n            userInput,\n            setUserInput,\n            chatbotResponse,\n            handleChatbot,\n            isLoading\n        }}>\n            {children}\n        </AppContext.Provider>\n    );\n};\n\nconst VideoList = () => {\n    const { videos } = useAppContext([]); // Access videos from context\n\n    return (\n        <div className=\"video-list\">\n            {videos.map((video, index) => (\n                <div className=\"video\" key={index}>\n                    <div className=\"video-item title\">\n                        <h2>{video.snippet?.title}</h2> {/* Accessing video title */}\n                    </div>\n                    <Link to={`${YT_WATCH_URL}${video.id.videoId}`}>\n                        <div className=\"video-item thumbnail\">\n                            <img src={video.snippet?.thumbnails.medium.url} alt=\"thumbnail\" />\n                        </div>\n                    </Link>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport { AppContextProvider, VideoList };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}